@using FinanceTracker.Services
@inject CustomAuthStateProvider AuthStateProvider

@code {
    [Parameter] public int WalletId { get; set; }
    [Parameter] public EventCallback OnTransactionAdded { get; set; }

    private Transaction newTransaction = new Transaction();
    private bool isVisible;

    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("UserId");
        return userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId) ? userId : 0;
    }

    public void Show()
    {
        newTransaction.WalletId = WalletId; // Set the wallet ID when the modal is shown
        isVisible = true;
        StateHasChanged(); // Ensure the component re-renders when the modal is shown
    }

    public void Hide()
    {
        isVisible = false;
        StateHasChanged(); // Ensure the component re-renders when the modal is hidden
    }

    private async Task HandleValidSubmit()
    {
        var userId = await GetUserIdAsync();
        await TransactionService.AddTransaction(newTransaction, userId);
        newTransaction = new Transaction { WalletId = WalletId };
        await OnTransactionAdded.InvokeAsync();
        Hide();
    }
}

@if (isVisible)
{
    <div class="modal show" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="Hide"></button>
                </div>
                <div class="modal-body">                 
                    <EditForm Model="@newTransaction" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label>Description:</label>
                            <InputText @bind-Value="newTransaction.Description" />
                        </div>
                        <div>
                            <label>Category:</label>
                            <InputText @bind-Value="newTransaction.Category"/>
                        </div>
                        <div>
                            <label>Amount:</label>
                            <InputNumber @bind-Value="newTransaction.Amount" />
                        </div>
                        <div>
                            <label for="type">Type:</label>
                            <InputSelect @bind-Value="newTransaction.Type">
                                <option value="">Select Type</option>
                                <option value="Receive">Receive</option>
                                <option value="Send">Send</option>
                            </InputSelect>
                        </div>
                        <button type="submit">Add Transaction</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private TransactionService TransactionService { get; set; }
}
