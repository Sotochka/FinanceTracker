@layout LoginLayout
@page "/login"


@rendermode InteractiveServer


@using FinanceTracker.Components.Data
@using FinanceTracker.Components.Layout
@using FinanceTracker.Services
@inject UserService UserService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation


<PageTitle>Login</PageTitle>
<div class="login">
    <h2 class="login-heading">Welcome back</h2>
    <p class="login-text">Hope you enjoy using our app</p>
    <div class="login-form">
        <div class="login-form-login">
            <label for="Login">Login:</label>
            <input @bind="login" type="text" class="login-form-login-input" required />
        </div>
        <div class="login-form-password">
            <label for="Password">Password:</label>
            <input @bind="password" type="password" class="login-form-password-input" required />
        </div>
        <button @onclick="LoginUser" class="login-form-btn">Login</button>
    </div>
    <div class="sign-in">
        <p>Don't have an account? <a href="/register" class="register-user">Sign up</a></p>
    </div>
</div>



@code {
    string login;
    string password;

    private async Task LoginUser()
    {
        var user = await UserService.Login(login, password);
        if (user != null)
        {
            AuthStateProvider.SetUser(user);
            Navigation.NavigateTo("/home");
        }
        else
        {
            
        }
    }
}
