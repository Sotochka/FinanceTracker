@page "/login"
@layout LoginLayout


@rendermode InteractiveServer


@using FinanceTracker.Components.Layout
@using FinanceTracker.Components.Data
@using FinanceTracker.Services
@inject UserService UserService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

    
<PageTitle>Login</PageTitle>
<div class="login">
    <h2 class="login-heading">Welcome back</h2>
    <p class="login-text">Hope you enjoy using our app</p>
    <div class="login-form">
        <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="login-form-login">
                <label for="Login">Login:</label>
                <InputText @bind-Value="user.Login" id="Login" type="text" class="login-form-login-input" required />
            </div>
            <div class="login-form-password">
                <label for="Password">Password:</label>
                <InputText @bind-Value="user.Password" id="Password" type="password" class="login-form-password-input" required />
            </div>
            <button type="submit" class="login-form-btn">Login</button>
        </EditForm>
    </div>
    <div class="sign-in">
        <p>Don't have an account? <a href="/register" class="register-user">Sign up</a></p>
    </div>
</div>



@code {
   private User user = new User();

    private async Task HandleValidSubmit()
    {
        try
        {
            var validUser = await UserService.Login(user);
            if (validUser != null)
            {
                await AuthStateProvider.SetUser(validUser);
                Navigation.NavigateTo("/home");
            }
            else
            {
                // Show error message
                Console.WriteLine("Invalid login credentials");
            }
        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., show an error message)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
