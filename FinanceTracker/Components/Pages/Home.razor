@page "/home"

@rendermode InteractiveServer
@using FinanceTracker.Components.Data
@using FinanceTracker.Services

@inject UserService UserService
@inject TransactionService TransactionService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Dashboard</PageTitle>

<div class="logout">
    <button @onclick="Logout" class="logout-btn">Logout</button>
</div>


<h1 class="page-title">Dashboard</h1>
@if (transactions != null)
{
    
    <div class="total-amount">
        <h4>Total Amount: @GetTotalAmount()</h4>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Description</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Category</td>
                    <td>
                        <button @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                    </td>
                    <td>@transaction.Type</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

<button class="btn btn-primary" @onclick="ShowModal">Add Transaction</button>

<AddTransactionModal Visible="@showModal" OnTransactionAdded="RefreshTransactions" />


@code{
    private List<Transaction> transactions; 
    public bool showModal = false;
   
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var login = authState.User.Identity.Name;

        if (login != null)
        {
            var user = await UserService.GetUserByLogin(login);
            if (user != null)
            {
                var userId = user.Id;
                transactions = await TransactionService.GetTransactionsByUserId(userId);
            }
        }
    }

    private async Task LoadTransactions()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var login = authState.User.Identity.Name;

        // Assuming you have a method in UserService to get User by login
        var user = await UserService.GetUserByLogin(login);

        transactions = await TransactionService.GetTransactionsByUserId(user.Id);
    }

    public void ShowModal()
    {
        showModal = true;
    }
    private void HideModal()
    {
        showModal = false;
    }
    private async Task RefreshTransactions()
    {
        await LoadTransactions();
        showModal = false;
        StateHasChanged();
    }





/* 
    private async Task HandleValidSubmit()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var login = authState.User.Identity.Name;

        if(login != null)
        {
            var user = await UserService.GetUserByLogin(login);
            if(user != null)
            {
                var transaction = new Transaction
                {
                    Description = newTransaction.Description,
                    Category = newTransaction.Category,
                    Amount = newTransaction.Amount,
                    Type = newTransaction.Type,
                    UserId = user.Id
                };
                await TransactionService.AddTransaction(transaction);
                transactions.Add(transaction);
            }
        }
    } 
    
    */

     private decimal GetTotalAmount()
    {
        return transactions.Sum(t => t.Type == "Receive" ? t.Amount : -t.Amount);
    }

    private void Logout(){
        ((CustomAuthStateProvider)AuthStateProvider).Logout();
        Navigation.NavigateTo("/login", true);
    }

    private async Task DeleteTransaction(int transactionId)
    {
        await TransactionService.DeleteTransaction(transactionId);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        var user = await UserService.GetUserByLogin(userName);
        transactions = await TransactionService.GetTransactionsByUserId(user.Id);
        StateHasChanged();
    }

}