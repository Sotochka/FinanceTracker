@page "/home"

@rendermode InteractiveServer
@using FinanceTracker.Components.Data
@using FinanceTracker.Services
@using FinanceTracker.Components.Pages

@inject UserService UserService
@inject TransactionService TransactionService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Dashboard</PageTitle>

<header class="header">
    <h1 class="page-title">Dashboard</h1>
    <div class="logout">
        <button @onclick="ShowWalletModal">Add wallet</button>
        <button @onclick="Logout" class="logout-btn">Logout</button>
    </div>
</header>

<main class="main">
    @if (wallets != null)
    {
        foreach (var wallet in wallets)
        {
            <div class="transaction-balance">
                <p class="transaction-balance-text">Cash</p>
                <p class="transaction-balance-amount">@wallet.Balance</p>
            </div>    
        }
    }
    
    <div class="transaction-list">
        @if (transactions != null)
        {
            <h2 class="transaction-heading">Last Transaction</h2>
            @foreach (var transaction in transactions)
            {
                <div class="transaction-item">
                    <div class="transaction-item-content">
                        @if (transaction.Type == "Receive")
                        {
                            <p class="transaction-item-amount green">+@transaction.Amount UAH</p>
                        }
                        else
                        {
                            <p class="transaction-item-amount">@transaction.Amount UAH</p>
                        }
                        <p class="transaction-item-description">@transaction.Description</p>
                    </div>
                    <img @onclick="() => DeleteTransaction(transaction.Id)" class="transaction-item-btn" src="Delete-button.svg.png"/>
                </div>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </div>

    <button class="btn btn-primary" @onclick="ShowModal">Add Transaction</button>
</main>

<AddWalletModalModal Visible="@showWalletModal"/>

<AddTransactionModal Visible="@showModal" OnTransactionAdded="RefreshTransactions" />


@code{
    private List<Transaction> transactions;
    private List<Wallet> wallets;
    public bool showModal = false;
    public bool showWalletModal = false;
   
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var login = authState.User.Identity.Name;

        if (login != null)
        {
            var user = await UserService.GetUserByLogin(login);
            if (user != null)
            {
                var userId = user.Id;
                await LoadTransactions();
            }
        }
    }
    
    private async Task LoadTransactions()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var login = authState.User.Identity.Name;

        // Assuming you have a method in UserService to get User by login
        var user = await UserService.GetUserByLogin(login);

        transactions = await TransactionService.GetTransactionsByUserId(user.Id);
    }

    public void ShowModal()
    {
        showModal = true;
    }
    private void HideModal()
    {
        showModal = false;
    }
    public void ShowWalletModal()
    {
        showModal = true;
    }
    private void HideWalletModal()
    {
        showModal = false;
    }
    private async Task RefreshTransactions()
    {
        await LoadTransactions();
        showModal = false;
        StateHasChanged();
    }
    private void Logout(){
        ((CustomAuthStateProvider)AuthStateProvider).Logout();
        Navigation.NavigateTo("/login", true);
    }

    private async Task DeleteTransaction(int transactionId)
    {
        await TransactionService.DeleteTransaction(transactionId);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        var user = await UserService.GetUserByLogin(userName);
        transactions = await TransactionService.GetTransactionsByUserId(user.Id);
        StateHasChanged();
    }
    
}