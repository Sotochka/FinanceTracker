@page "/home"

@rendermode InteractiveServer
@using FinanceTracker.Components.Data
@using FinanceTracker.Services

@inject UserService UserService
@inject TransactionService TransactionService
@inject WalletService WalletService
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Dashboard</PageTitle>

<AddWalletModal @ref="addWalletModal" OnWalletAdded="OnWalletAdded" />

<header class="header">
    <h1 class="page-title">Dashboard</h1>
    <div class="logout">
        <button @onclick="ShowAddWalletModal" class="add-wallet-btn">Add New Wallet</button>
        <button @onclick="Logout" class="logout-btn">Logout</button>
    </div>
</header>

<main class="main">
    <div class="wallet-list">
        @if (wallets != null)
        {
            foreach (var wallet in wallets)
            {
                <div class="wallet-balance">

                    <a href="/wallets/@wallet.Id" class="wallet-ref">
                        <p class="wallet-balance-name">@wallet.Name</p>
                        <p class="wallet-balance-amount">@wallet.Balance UAH</p>
                    </a>
                </div>
            }
        }
        else
        {
            <div>
                <p>Wallets not found</p>
            </div>
        }
    </div>

    <div class="transaction-list">
        @if (transactions != null)
        {
            <h2 class="transaction-heading">Last Transaction</h2>
            @foreach (var transaction in transactions)
            {
                <div class="transaction-item">
                    <div class="transaction-item-content">
                        @if (transaction.Type == "Receive")
                        {
                            <p class="transaction-item-amount green">+@transaction.Amount UAH</p>
                        }
                        else
                        {
                            <p class="transaction-item-amount">@transaction.Amount UAH</p>
                        }
                        <p class="transaction-item-description">@transaction.Description</p>
                    </div>
                    <img @onclick="() => DeleteTransaction(transaction.Id)" class="transaction-item-btn" src="Delete-button.svg.png"/>
                </div>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </div>

</main>


@code{
    private AddWalletModal addWalletModal;
    private List<Transaction> transactions;
    private List<Wallet> wallets;
    private User user;

    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("UserId");
        return userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId) ? userId : 0;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var userId = await GetUserIdAsync();   
        user = await UserService.GetUserByIdAsync(userId);
        await LoadWallets();
        await LoadTransactions();
    }
    
    private async Task LoadTransactions()
    {
        var userId = await GetUserIdAsync();
        transactions = await TransactionService.GetTransactionsByUserId(userId);
    }

    private async Task LoadWallets()
    {
        var userId = await GetUserIdAsync();
        wallets = await WalletService.GetWalletsByUserIdAsync(userId);

        foreach (var wallet in wallets)
        {
            wallet.Balance = await WalletService.GetWalletBalanceAsync(wallet.Id);
        }

    }
    private async Task Logout(){
        await ((CustomAuthStateProvider)AuthStateProvider).LogoutAsync();
        Navigation.NavigateTo("/login", true);
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var userId = await GetUserIdAsync();
            transactions = await TransactionService.GetTransactionsByUserId(userId);
            StateHasChanged();
    }
    
    private async Task OnWalletAdded()
    {
        await LoadWallets();
    }

    private void ShowAddWalletModal()
    {
        addWalletModal.Show();
    }
}