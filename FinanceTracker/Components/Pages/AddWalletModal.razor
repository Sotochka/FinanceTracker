@using FinanceTracker.Services
@inject CustomAuthStateProvider AuthStateProvider
@code {
    [Parameter] public EventCallback OnWalletAdded { get; set; }
    private Wallet wallets = new Wallet();
    private Wallet newWallet = new Wallet();
    private bool isVisible;

    public void Show() => isVisible = true;
    public void Hide() => isVisible = false;
    
    private async Task<int> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("UserId");
        return userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId) ? userId : 0;
    }
    
    private async Task HandleValidSubmit()
    {
        var userId = await GetUserIdAsync();
        await WalletService.AddWalletAsync(newWallet, userId);
        newWallet = new Wallet(); // Reset the form
        await OnWalletAdded.InvokeAsync(); 
        Hide();
        
    }
}

@if (isVisible)
{
<div class="modal" tabindex="-1" role="dialog" style="display:block; background:rgba(0,0,0,0.5);">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Wallet</h5>
                <button type="button" class="close" aria-label="Close" @onclick="Hide">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@newWallet" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="walletName">Name</label>
                        <InputText id="walletName" class="form-control" @bind-Value="newWallet.Name" />
                    </div>
                    <button type="submit" class="btn btn-primary">Add Wallet</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}

@code {
[Inject] private WalletService WalletService { get; set; }
}